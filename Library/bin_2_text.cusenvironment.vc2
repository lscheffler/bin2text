*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.21" SourceFile="bin_2_text.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS cusenvironment AS custom 		&& Default settings for DATASESSION
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\stuff.h"
	*<DefinedPropArrayMethod>
		*m: reset_oldresource		&& Setze Resource auf den Wert beim Init
		*m: restore_		&& Setzt die SET-Befehle auf ihre ursprünglichen Werte zurück.
		*m: restore_global		&& Stellt Einstellungen zurück, die für das ganze Programm, unabhängig von DATASESSION gelten. (Wird einmal für das Programm durchgeführt)
		*m: restore_private		&& Stellt Einstellungen zurück, die für eine private DATASESSION gelten. Wird für jede Form mit privater Datasession durchgeführt.
		*m: restore_toolbars		&& Stellt die Standard-Toolbars wieder her.
		*m: set_		&& Stellt alle SET-Befehle ein.
		*m: set_global		&& Setze Einstellungen, die für das ganze Programm, unabhängig von DATASESSION gelten. (Wird einmal für das Programm durchgeführt)
		*m: set_private		&& Setze Einstellungen, die für eine private DATASESSION gelten. Wird für jede Form mit privater Datasession durchgeführt.
		*m: store_		&& Speichert die Einstellungen der SET Befehle.
		*m: store_global		&& Speichert Einstellungen die für das ganze Programm, unabhängig von DATASESSION gelten. (Wird einmal für das Programm durchgeführt)
		*m: store_private		&& Speichert Einstellungen die für eine private DATASESSION gelten. Wird für jede Form mit privater Datasession durchgeführt.
		*m: store_toolbars		&& Speichert die sichtbarkeit der Standard-Toolbars und verbirgt diese.
		*p: gcdefaultclasslib		&& Spezielle, zur Arbeit unbedingt nötige ClassLibrarys. (Frameworkspezifisch)
		*p: glisapplication		&& Wir gehören zum Hauptprogramm oder objekt, wird gestarte bevor irgend eine Einstellung getrofffen wird.
		*p: hcstartpath		&& intern, der Pfad unter dem main.prg gerufen wurde (der Pfad der Exe, nur um im Debugmode die Includes zu finden)
		*p: rnsetting		&& Zähler des letzten Satzes gespeicherter Eigenschaften
		*a: rasettings[1,3]		&& Array mit Objekten der gespeicherten Einstellungen. THIS.gnSetting hält die letzten gespeicherten Satz
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	HIDDEN hcstartpath
	PROTECTED gcdefaultclasslib,rasettings,rnsetting
	*<PropValue>
		gcdefaultclasslib = 
		Name = "cusenvironment"
		rnsetting = 0
		_memberdata = <VFPData>
			<memberdata name="reset_oldresource" type="method" display="Reset_OldResource" favorites="False"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Destroy
		*THIS.gESET()
		
	ENDPROC

	PROCEDURE Init
		LPARAMETERS ;
		 tlIsApplication,;
		 tcStartPath,;
		 tlNoSet
		
		WITH THIS
		 IF VARTYPE(m.tcStartPath)='C' AND DIRECTORY(m.tcStartPath) THEN
		  .hcStartPath = ADDBS(m.tcStartPath)
		 ENDIF &&VARTYPE(m.tcStartPath ...
		
		*wenn die Klasse durch CREATEOBJECT oder ADDOBJECT gerufen wird
		*Wenn dabei tlIsApplication dann True.
		*False bekommen wir immer, wenn wir das Init durch ein Object im Container starten.
		*und dann soll THIS.glIsApplication auch schön so bleiben wie es ist
		 .glIsApplication = IIF(TYPE('tlIsApplication')='L' AND m.tlIsApplication,True,.glIsApplication)
		
		*-- Einstellungen der SET- und ON-Befehle speichern
		*dies wird in Main.prg geschrieben, da dort schon die ersten Veränderungen vorgenommen werden.
		*der Hauptsinn liegt wohl im Wiederherstellen der Umgebung.
		
		 .Store_(IIF(.glIsApplication,2^0+2^1+2^2,2^0))
		
		 IF !m.tlNoSet THEN
		  .Set_(2^0)
		 ENDIF &&!m.tlNoSet
		
		*!*	 IF .glIsApplication THEN
		*!*	  PUSH MENU _MSYSMENU
		*!*	 ENDIF &&.glIsApplication
		
		*!*	 .Store_Private()
		
		*!*	 IF .glIsApplication THEN
		*!*	  .Store_Global()
		*!*	 ENDIF &&.glIsApplication
		
		ENDWITH &&THIS
		
	ENDPROC

	PROCEDURE reset_oldresource		&& Setze Resource auf den Wert beim Init
		IF APPLICATION.STARTMODE=0 THEN
		 LOCAL;
		  lvTemp
		
		 WITH THIS
		  IF EMPTY(.rnSetting) THEN
		   RETURN
		  ENDIF &&EMPTY(.rnSetting)
		
		  WITH .raSettings(.rnSetting,1)
		   lvTemp = .gcOldResource
		   IF m.lvTemp='OFF' THEN
		    SET RESOURCE OFF
		   ELSE &&m.lvTemp='OFF'
		    lvTemp = .gcOldResource_FName
		    IF FILE(m.lvTemp) THEN
		     SET RESOURCE TO (m.lvTemp)
		    ELSE &&FILE(m.lvTemp)
		*    SET RESOURCE TO
		     SET RESOURCE OFF
		    ENDIF &&FILE(m.lvTemp)
		   ENDIF &&m.lvTemp='OFF'
		  ENDWITH &&.raSettings(.rnSetting,1)
		 ENDWITH &&THIS
		ENDIF &&APPLICATION.STARTMODE=0
		
	ENDPROC

	PROCEDURE restore_		&& Setzt die SET-Befehle auf ihre ursprünglichen Werte zurück.
		LPARAMETERS;
		 tnSet,;
		 tnPos
		
		IF PCOUNT()=0 OR VARTYPE(tnSet)#'N' THEN
		 tnSet = 2^0
		ENDIF &&PCOUNT()=0 OR VARTYPE(tnSet)#'N'
		
		*-- SET- und ON-Befehle einstellen
		WITH THIS
		 IF EMPTY(.rnSetting) THEN
		  RETURN
		 ENDIF &&EMPTY(.rnSetting)
		
		 IF PCOUNT()>1 AND BETWEEN(m.tnPos,1,.rnSetting) THEN
		  .rnSetting = m.tnPos
		 ENDIF &&PCOUNT()s>1 AND BETWEEN(m.tnPos,1,.rnSetting)
		
		 IF BITAND(m.tnSet,2^2)=2^2 AND .raSettings(.rnSetting,4) THEN
		  POP MENU _MSYSMENU TO MASTER
		  .raSettings(.rnSetting,3) = True
		 ENDIF &&BITAND(m.tnSet,2^2)=2^2 AND .raSettings(.rnSetting,4)
		
		 IF BITAND(m.tnSet,2^0)=2^0 AND .raSettings(.rnSetting,2) THEN
		  .Restore_Private(.raSettings(.rnSetting,1))
		 ENDIF &&BITAND(m.tnSet,2^0)=2^0 AND .raSettings(.rnSetting,2)
		 IF BITAND(m.tnSet,2^1)=2^1 AND .raSettings(.rnSetting,3) THEN
		  .Restore_Global(.raSettings(.rnSetting,1))
		 ENDIF &&BITAND(m.tnSet,2^1)=2^1 AND .raSettings(.rnSetting,3)
		
		 .raSettings(.rnSetting,1) = NIL
		 .raSettings(.rnSetting,2) = False
		 .raSettings(.rnSetting,3) = False
		 .raSettings(.rnSetting,4) = False
		
		 .rnSetting = .rnSetting-1
		
		 DIMENSION;
		  .raSettings(EVL(.rnSetting,1),4)
		
		ENDWITH &&THIS
		
	ENDPROC

	PROCEDURE restore_global		&& Stellt Einstellungen zurück, die für das ganze Programm, unabhängig von DATASESSION gelten. (Wird einmal für das Programm durchgeführt)
		LPARAMETERS;
		 toObject
		
		LOCAL;
		 lvTemp    AS VARIANT,;
		 lvOldTalk AS VARIANT
		
		WITH toObject
		 lvOldTalk = SET('TALK')
		 SET TALK OFF
		
		 lvTemp = .gcOldAlternate
		 SET ALTERNATE &lvTemp
		 lvTemp = .gcOldAlternate_FName
		 IF FILE(m.lvTemp) THEN
		  lvTemp = '"'+m.lvTemp+'" ADDITIVE'
		 ENDIF &&FILE(m.lvTemp)
		 SET ALTERNATE TO &lvTemp
		
		 lvTemp = .gcOldAsserts
		 SET ASSERTS &lvTemp
		
		 lvTemp = .gcOldBell
		 SET BELL &lvTemp
		 .gcOldBell              = SET('BELL')
		 lvTemp = .gcOldBell_FName
		 IF FILE(m.lvTemp) THEN
		  SET BELL TO (m.lvTemp)
		 ELSE &&FILE(m.lvTemp)
		  SET BELL TO
		 ENDIF &&FILE(m.lvTemp)
		
		 lvTemp = .gcOldBrowseIME
		 SET BROWSEIME &lvTemp
		
		 lvTemp = .gcOldClasslib
		 SET CLASSLIB TO &lvTemp
		
		 lvTemp = .gcOldClock
		 SET CLOCK &lvTemp
		 IF m.lvTemp='ON' THEN
		  lvTemp = .gcOldClock_Coord
		  SET CLOCK TO &lvTemp
		 ENDIF &&m.lvTemp='ON'
		
		 lvTemp = .gcOldCompatible+' '+.gcOldCompatible_Prompt
		 SET COMPATIBLE &lvTemp
		
		 lvTemp = .gcOldConsole
		 SET CONSOLE &lvTemp
		
		 lvTemp = .gcOldCoverage
		 IF FILE(m.lvTemp) THEN
		  lvTemp = '"'+m.lvTemp+'" ADDITIVE'
		 ENDIF &&FILE(m.lvTemp)
		
		 SET COVERAGE TO &lvTemp
		
		 lvTemp = .gcOldCpDialog
		 SET CPDIALOG &lvTemp
		
		 lvTemp = .gcOldCursor
		 SET CURSOR &lvTemp
		
		 lvTemp = .gcOldDefault
		 IF DIRECTORY(m.lvTemp) THEN
		  SET DEFAULT TO (m.lvTemp)
		 ELSE &&DIRECTORY(m.lvTemp)
		  SET DEFAULT TO
		 ENDIF &&DIRECTORY(m.lvTemp)
		
		 lvTemp = .gcOldDevice
		 SET DEVICE TO &lvTemp
		
		 lvTemp = .gcOldDisplay
		* SET DISPLAY TO &lvTemp
		
		 lvTemp = .gcOldEscape
		 SET ESCAPE &lvTemp
		
		 lvTemp = .gcOldEventList
		 SET EVENTLIST TO &lvTemp
		
		 lvTemp = .gcOldEventTracking
		 SET EVENTTRACKING &lvTemp
		 lvTemp = .gcOldEventTracking_FName
		 IF FILE(m.lvTemp) THEN
		  lvTemp = '"'+m.lvTemp+'" ADDITIVE'
		 ENDIF &&FILE(m.lvTemp)
		 SET EVENTTRACKING TO &lvTemp
		
		 lvTemp = .gnOldFDoW
		 SET FDOW TO (lvTemp)
		
		 lvTemp = .gcOldFullPath
		 SET FULLPATH &lvTemp
		
		 lvTemp = .gnOldFWeek
		 SET FWEEK TO (lvTemp)
		
		 lvTemp = .gcOldHeadings
		 SET HEADINGS &lvTemp
		
		 IF .gcOldHelp='ON' AND FILE(.gcOldHelp_FName) THEN
		  lvTemp = .gcOldHelp_FName
		  SET HELP TO (m.lvTemp)
		  SET HELP ON
		 ELSE &&.gcOldHelp='ON' ...
		  SET HELP OFF
		 ENDIF &&.gcOldHelp='ON' ...
		
		 lvTemp = .gcOldKeyComp
		 SET KEYCOMP TO &lvTemp
		
		 _VFP.LANGUAGEOPTIONS = .gnOldLanguageOptions
		
		 lvTemp = .gcOldLibrary
		 SET LIBRARY TO &lvTemp
		
		 _SCREEN.MOUSEPOINTER = .gnOldMousePointer
		
		 lvTemp = .gcOldNotify
		 SET NOTIFY &lvTemp
		
		 lvTemp = .gcOldNullDisplay
		 SET NULLDISPLAY TO (m.lvTemp)
		
		 lvTemp = .gnOldOdoMeter
		 SET ODOMETER TO (m.lvTemp)
		
		 lvTemp = .gcOldOLEObject
		 SET OLEOBJECT &lvTemp
		
		 lvTemp = .gcOldOptimize
		 SET OPTIMIZE &lvTemp
		
		 lvTemp = .gcOldPalette
		 SET PALETTE &lvTemp
		
		 lvTemp = .gcOldPath
		 SET PATH TO &lvTemp
		
		*!*	 lvTemp = .gcOld
		*!*	 SET BELL &lvTemp
		*!*	 .gcOldPrinter           = SET('PRINTER')
		*!*	 lvTemp = .gcOld
		*!*	 SET BELL &lvTemp
		*!*	 .gcOldPrinter_PortName  = SET('PRINTER',1)
		*!*	 lvTemp = .gcOld
		*!*	 SET BELL &lvTemp
		*!*	 .gcOldPrinter_WinDefa   = SET('PRINTER',2)
		*!*	 lvTemp = .gcOld
		*!*	 SET BELL &lvTemp
		*!*	 .gcOldPrinter_FoxDefa   = SET('PRINTER',3)
		 lvTemp = .gcOldProcedure
		 SET PROCEDURE TO &lvTemp
		
		 lvTemp = ;
		  STRTRAN(STR(.gnOldRefresh       ,12,3),SET('POINT'),'.')+','+;
		  STRTRAN(STR(.gnOldrefresh_Buffer,12,3),SET('POINT'),'.')
		 SET REFRESH TO &lvTemp
		
		 IF APPLICATION.STARTMODE=0 THEN
		  lvTemp = .gcOldResource
		  IF m.lvTemp='OFF' THEN
		   SET RESOURCE OFF
		  ELSE &&m.lvTemp='OFF'
		   lvTemp = .gcOldResource_FName
		   IF FILE(m.lvTemp) THEN
		    SET RESOURCE TO (m.lvTemp)
		   ELSE &&FILE(m.lvTemp)
		*    SET RESOURCE TO
		    SET RESOURCE OFF
		   ENDIF &&FILE(m.lvTemp)
		  ENDIF &&m.lvTemp='OFF'
		 ENDIF &&APPLICATION.STARTMODE=0
		
		 lvTemp = .gcOldSpace
		 SET SPACE &lvTemp
		
		 lvTemp = .gcOldStatus
		 SET STATUS &lvTemp
		
		 lvTemp = .gcOldStatusBar
		 SET STATUS BAR &lvTemp
		
		 lvTemp = .gnOldStrictDate
		 SET STRICTDATE TO (m.lvTemp)
		
		 lvTemp = .gnOldTypeAhead
		 SET TYPEAHEAD TO (m.lvTemp)
		
		 lvTemp = .gcOldUDFParms
		 SET UDFPARMS TO &lvTemp
		
		 CD (.gcOldDir)
		
		 lvTemp = .gcOldOnShutDown
		 ON SHUTDOWN &m.lvTemp
		
		 lvTemp = .gcOldOnError
		 ON ERROR &m.lvTemp
		
		 lvTemp = .gcOldOnEscape
		 ON ESCAPE &m.lvTemp
		
		 lvTemp = .gcOldOnPage
		 ON PAGE &m.lvTemp
		
		 _SCREEN.CAPTION = .gcOldScreenCaption
		 _SCREEN.ICON    = .gcOldScreenIcon
		
		 #IFNDEF dnVersion7_Prog
		  SET ENGINEBEHAVIOR (.gnOldEngineBehavior)
		  SET TABLEVALIDATE TO (.gnOldTableValidate)
		  lvTemp =  .gcOldNotifyCursor
		  SET NOTIFY CURSOR &lvTemp
		  _SCREEN.THEMES = .glOldThemes
		 #ENDIF &&dnVersion7_Prog
		
		 #IFNDEF dnVersion8_Prog THEN
		  lvTemp = .gnOldReportBehavior
		  SET REPORTBEHAVIOR (m.lvTemp)
		
		  _REPORTOUTPUT  = .gnOldReportOutput
		  _REPORTPREVIEW = .gnOldReportPreview
		  _REPORTBUILDER = .gnOldReportBuilder
		 #ENDIF &&dnVersion8_Prog
		
		*not for this project
		*THIS.Restore_ToolBars(toObject)
		
		 SET TALK &lvOldTalk
		
		 lvTemp = .goLabel.Alt_F10
		 ON KEY LABEL ALT+F10 &lvTemp
		
		 SYS(0602,.gnSys_0602)
		 SYS(2450,.gnSys_2450)
		 SYS(2700,.gnSys_2700)
		
		ENDWITH &&toObject
		
	ENDPROC

	PROCEDURE restore_private		&& Stellt Einstellungen zurück, die für eine private DATASESSION gelten. Wird für jede Form mit privater Datasession durchgeführt.
		LPARAMETERS;
		 toObject
		
		LOCAL;
		 lvTemp AS VARIANT
		
		WITH toObject
		 lvTemp = .gcOldAnsi
		 SET ANSI &lvTemp
		
		 lvTemp = .gcOldAutoSave
		 SET AUTOSAVE &lvTemp
		
		 lvTemp = .gnOldBlockSize
		 SET BLOCKSIZE TO (m.lvTemp)
		
		 lvTemp = .gcOldCarry
		 SET CARRY &lvTemp
		
		 lvTemp = .gcOldCollate
		 SET COLLATE TO (m.lvTemp)
		
		 lvTemp = .gcOldConfirm
		 SET CONFIRM &lvTemp
		
		 lvTemp = .gcOldDatabase
		 IF DBUSED(m.lvTemp) THEN
		  SET DATABASE TO (m.lvTemp)
		 ELSE &&DBUSED(m.lvTemp)
		  SET DATABASE TO
		 ENDIF &&DBUSED(m.lvTemp)
		
		 lvTemp = .gcOldDeleted
		 SET DELETED &lvTemp
		
		 lvTemp = .gcOldExact
		 SET EXACT &lvTemp
		
		 lvTemp = .gcOldExclusive
		 SET EXCLUSIVE &lvTemp
		
		 lvTemp = .gcOldFixed
		 SET FIXED &lvTemp
		
		 lvTemp = .gcOldLock
		 SET LOCK &lvTemp
		
		 lvTemp = .gnOldMemoWidth
		 SET MEMOWIDTH TO (m.lvTemp)
		
		 lvTemp = .gcOldMultiLocks
		 SET MULTILOCKS &lvTemp
		
		 lvTemp = .gcOldNear
		 SET NEAR &lvTemp
		
		 lvTemp = .gcOldNull
		 SET NULL &lvTemp
		
		 #IFDEF dnVersion8_Prog THEN
		  lvTemp = .gnOldReprocess
		  SET REPROCESS TO (m.lvTemp)
		 #ELSE &&dnVersion8_Prog
		  lvTemp = .gnOldReprocess
		  IF .gnOldReprocessMode=0 THEN
		   SET REPROCESS TO (m.lvTemp)
		  ELSE &&.gnOldReprocessMode=0
		   SET REPROCESS TO (m.lvTemp) SECONDS
		  ENDIF &&.gnOldReprocessMode=0
		
		  lvTemp = .gnOldReprocess_S
		  IF .gnOldReprocessMode_S=0 THEN
		   SET REPROCESS TO (m.lvTemp) SYSTEM
		  ELSE &&.gnOldReprocessMode_S=0
		   SET REPROCESS TO (m.lvTemp) SECONDS SYSTEM
		  ENDIF &&.gnOldReprocessMode_S=0
		 #ENDIF &&dnVersion8_Prog
		
		 lvTemp = .gcOldSafety
		 SET SAFETY &lvTemp
		
		 lvTemp = .gcOldTalk
		 SET TALK &lvTemp
		
		 lvTemp = .gcOldTalk_Window
		 SET TALK &lvTemp
		
		 lvTemp = .gcOldUnique
		 SET UNIQUE &lvTemp
		
		*Einstellungen die Länderspezifisch sind
		 lvTemp = .gcOldSysFormats
		 SET SYSFORMATS &lvTemp
		
		*Zwischen SET SYSFORMATS und den folgenden Einstellungen (bis zum Ende) gibt es Wechselwirkungen,
		*siehe Hilfe SET SYSFORMAT
		 lvTemp = 'SET CURRENCY '+.gcOldCurrency
		 &lvTemp
		
		 lvTemp = 'SET CURRENCY TO "'+.gcOldCurrency_Symbol+'"'
		 &lvTemp
		
		 lvTemp = .gnOldDecimals
		 SET DECIMALS TO (m.lvTemp)
		
		 lvTemp = .gcOldPoint
		 IF EMPTY(m.lvTemp) THEN
		  SET POINT TO
		 ELSE &&EMPTY(m.lvTemp)
		  SET POINT TO (m.lvTemp)
		 ENDIF &&EMPTY(m.lvTemp)
		
		 lvTemp = .gcOldDate
		 SET DATE &lvTemp
		
		 DO CASE
		  CASE .gnOldDateOrder=0
		   SET DATE MDY
		  CASE .gnOldDateOrder=1
		   SET DATE DMY
		  CASE .gnOldDateOrder=2
		   SET DATE YMD
		 ENDCASE
		
		*Zwischen SET DATE und den folgenden Einstellungen (bis zum Ende) gibt es Wechselwirkungen,
		*siehe Hilfe SET DATE
		 lvTemp = .gcOldCentury+;
		  ' TO '+STR(.gnOldCentury_nCentury)+' ROLLOVER '+STR(.gnOldCentury_nRollOver)
		 SET CENTURY &lvTemp
		
		 lvTemp = .gnOldHours
		 SET HOURS TO (m.lvTemp)
		
		 lvTemp = .gcOldSeconds
		 SET SECONDS &lvTemp
		
		 lvTemp = .gcOldMark
		 IF EMPTY(m.lvTemp) THEN
		  SET MARK TO
		 ELSE &&EMPTY(m.lvTemp)
		  SET MARK TO (m.lvTemp)
		 ENDIF &&EMPTY(m.lvTemp)
		
		
		 #IFNDEF dnVersion7_Prog
		  lvTemp = .gcOldAutoIncError
		  SET AUTOINCERROR &lvTemp
		 #ENDIF &&dnVersion7_Prog
		
		 #IFNDEF dnVersion8_Prog THEN
		  lvTemp = .gcOldTablePrompt
		  SET TABLEPROMPT &lvTemp
		
		  lvTemp = .gcOldVarCharMapping
		  SET VARCHARMAPPING &lvTemp
		 #ENDIF &&dnVersion8_Prog
		ENDWITH &&toObject
		
	ENDPROC

	PROCEDURE restore_toolbars		&& Stellt die Standard-Toolbars wieder her.
		LPARAMETERS;
		 toObject
		
		IF APPLICATION.STARTMODE=0 THEN
		 LOCAL;
		  lcKeyBrd AS CHARACTER,;
		  lnToolBar AS INTEGER
		
		 WITH toObject
		*-- Zeigt alle Visual FoxPro-Symbolleisten an, die vorher verborgen wurden
		
		  lcKeyBrd = ""
		
		  FOR lnToolBar = 1 TO 12
		   DO CASE
		    CASE INLIST(.gaToolBars(lnToolBar,1),dcTB_DEBUGGER_LOC,dcTB_DEBUGGER_LOC_UK);
		      AND !(WEXIST('Visual FoxPro Debugger');
		      OR WEXIST('Trace') OR WEXIST('Watch') OR WEXIST('Locals') OR WEXIST('Call Stack') OR WEXIST('Debug Output'))
		*Debugger Toolbar. Nur wenn der Debugger geöffnet ist
		     lcKeyBrd = lcKeyBrd+.gaToolBars(lnToolBar,3)
		    CASE .gaToolBars(lnToolBar,4) AND !WEXIST(.gaToolBars(lnToolBar,1))
		     lcKeyBrd = lcKeyBrd+" "+.gaToolBars(lnToolBar,3)
		    CASE .gaToolBars(lnToolBar,4) AND .gaToolBars(lnToolBar,5)
		     lcKeyBrd = lcKeyBrd+.gaToolBars(lnToolBar,3)
		     ACTIVATE WINDOW (.gaToolBars(lnToolBar,1))
		    OTHERWISE
		     lcKeyBrd = lcKeyBrd+.gaToolBars(lnToolBar,3)
		   ENDCASE
		  ENDFOR &&lnToolBar
		  IF [ ]$lcKeyBrd THEN
		* lcKeyBrd = [{F10}]+"{PAUSE 2}"+[V]+"{PAUSE 5}"+[T]+lcKeyBrd+[{CTRL+W}]
		
		   oShell = CREATEOBJECT("wscript.shell")
		   oShell.SendKeys("%")
		   oShell.SendKeys("vt")
		*WAIT WINDOW 'nun ists offen' TIMEOUT 5
		    oShell.SendKeys(lcKeyBrd)
		   oShell.SendKeys("^w")
		   RELEASE oShell
		
		* KEYBOARD lcKeyBrd CLEAR PLAIN
		   DOEVENTS
		  ENDIF &&"{SPACEBAR}"$lcKeyBrd
		
		  FOR lnToolBar = 13 TO ALEN(.gaToolBars, 1)
		   IF .gaToolBars(lnToolBar,4) AND WEXIST(.gaToolBars(lnToolBar,1)) THEN
		    SHOW WINDOW (.gaToolBars(lnToolBar,1))
		   ENDIF &&.gaToolBars(lnToolBar,4) AND WEXIST(.gaToolBars(lnToolBar,1))
		  ENDFOR &&lnToolBar
		 ENDWITH &&toObject
		ENDIF &&APPLICATION.STARTMODE=0
		
	ENDPROC

	PROCEDURE set_		&& Stellt alle SET-Befehle ein.
		LPARAMETERS;
		 tnSet
		
		IF PCOUNT()=0 OR VARTYPE(tnSet)#'N' THEN
		 tnSet = 2^0
		ENDIF &&PCOUNT()=0 OR VARTYPE(tnSet)#'N'
		*-- SET- und ON-Befehle einstellen
		WITH THIS
		 IF BITAND(m.tnSet,2^0)=2^0 THEN
		  .Set_Private()
		 ENDIF &&BITAND(m.tnSet,2^0)=2^0
		 IF BITAND(m.tnSet,2^1)=2^1 THEN
		  .Set_Global()
		 ENDIF &&BITAND(m.tnSet,2^1)=2^1
		ENDWITH &&THIS
		
	ENDPROC

	PROCEDURE set_global		&& Setze Einstellungen, die für das ganze Programm, unabhängig von DATASESSION gelten. (Wird einmal für das Programm durchgeführt)
		LOCAL ;
		 lvTemp AS VARIANT
		
		WITH THIS
		*just not this app
		 #IF .F. THEN
		  CLOSE DEBUGGER
		  IF WEXIST('Trace') THEN
		   RELEASE WINDOWS 'Trace'
		  ENDIF &&WEXIST('Trace')
		  IF WEXIST('Watch') THEN
		   RELEASE WINDOWS 'Watch'
		  ENDIF &&WEXIST('Watch')
		  IF WEXIST('Locals') THEN
		   RELEASE WINDOWS 'Locals'
		  ENDIF &&WEXIST('Locals')
		  IF WEXIST('Call Stack') THEN
		   RELEASE WINDOWS 'Call Stack')
		  ENDIF &&WEXIST('Call Stack'
		  IF WEXIST('Debug Output') THEN
		   RELEASE WINDOWS 'Debug Output'
		  ENDIF &&WEXIST('Debug Output')
		
		  DO CASE
		   CASE TYPE(dcApp)#T_Object
		   CASE PEMSTATUS(doApp,'gcPath_Proc',5) AND;
		     FILE(doApp.gcPath_Proc+doH.gcHelpFile)
		    SET HELP TO (doApp.gcPath_Proc+doH.gcHelpFile)
		    SET HELP ON
		   OTHERWISE
		    SET HELP OFF
		  ENDCASE
		 #ENDIF &&.F.
		
		 SET ALTERNATE OFF									&&Standard OFF
		 SET ALTERNATE TO
		
		 SET ASSERTS OFF									&&Standard OFF ACHTUNG! bei dlDebugMode in Set_Private überschrieben
		 SET BELL OFF										&&Standard ON
		 SET BELL TO	 									&&Standard keine Datei
		
		* SET BROWSEIME OFF									&&egal nur für DBCS
		
		* SET CLASSLIB TO
		
		 SET CLOCK STATUS									&&Standard STATUS
		* SET CLOCK TO 										&&unsinig bei STATUS
		
		 SET COMPATIBLE OFF									&&Standard OFF
		
		 SET CONSOLE OFF									&&Standard OFF
		
		 SET COVERAGE TO									&&Standard aus
		
		 SET CPDIALOG OFF									&&Standard OFF
		
		 SET CURSOR ON										&&Standard ON
		
		 SET DEFAULT TO										&&etwas besseres suchen?
		
		 SET DEVICE TO SCREEN								&&Standard Screen
		
		* SET DISPLAY TO 									&&Systemabhängig (und egal)
		
		 SET ESCAPE ON										&&Standard ON
		
		 SET EVENTLIST TO									&&Standard alle Events
		
		 SET EVENTTRACKING OFF								&&Standard OFF
		 SET EVENTTRACKING TO								&&Standard keine Datei
		
		* SET FDOW TO 1										&&Standard 1; aus SYSFORMATS Ländereinstellung von WINDOWS
		
		 SET FULLPATH ON									&&Standard nicht bezeichnet
		
		 SET FWEEK TO 1										&&Standard 1; aus SYSFORMATS Ländereinstellung von WINDOWS
		
		 SET HEADINGS ON									&&Standard ON
		
		 SET KEYCOMP TO WINDOWS								&&Standard nicht bezeichnet
		
		* SET PATH TO
		
		* SET LIBRARY TO			 							&&Standard keine Datei
		
		 SET MESSAGE TO ''
		
		 SET NOTIFY OFF										&&Standard ON
		
		 SET NULLDISPLAY TO 								&&Standard .NULL.
		
		 SET ODOMETER TO 100								&&Standard 100
		
		 SET OLEOBJECT ON									&&Standard ON
		
		 SET OPTIMIZE ON									&&Standard ON
		
		 SET PALETTE ON										&&Standard ON
		
		
		* SET PROCEDURE TO 									&&Standard kein Pfad
		
		 SET REFRESH TO 5,5									&&Standard 0,5
		
		 IF APPLICATION.STARTMODE=0 THEN
		  SET RESOURCE ON
		 ELSE &&APPLICATION.STARTMODE=0
		  SET RESOURCE OFF
		 ENDIF &&APPLICATION.STARTMODE=0
		
		 SET SPACE ON										&&Standard ON
		
		 SET STATUS OFF										&&Standard OFF
		
		 SET STATUS BAR ON									&&Standard OFF
		
		 SET STRICTDATE TO 1								&&Standard je nach dem
		
		 SET TYPEAHEAD TO 20								&&Standard 20
		
		 SET UDFPARMS TO VALUE								&&Standard VALUE
		
		 SET VIEW OFF
		
		* CD (.gcOldDir)
		
		* ON ERROR 											&&Standard kein Befehl
		
		* ON SHUTDOWN &lvTemp 								&&Standard kein Befehl
		
		* ON ESCAPE &lvTemp 								&&Standard kein Befehl
		
		* ON PAGE &lvTemp 									&&Standard kein Befehl
		
		 #IFNDEF dnVersion7_Prog
		  SET FUNCTION F5 TO CHR(245)
		
		  SET ENGINEBEHAVIOR 70								&&Standard 80
		  SET TABLEVALIDATE TO 3							&&Standard 3
		  IF _VFP.STARTMODE=4 THEN
		*nur wenn das Programm ohne DEBUG Möglichkeit läuft
		*also bei uns als EXE
		   SET NOTIFY CURSOR ON								&&Standard ON
		*   _SCREEN.THEMES = False							&&Standard True
		*    SYS(2700,0)										&&Standard 1 (XP Themes Enabled)
		  ENDIF &&_vfp.StartMode=4
		 #ENDIF &&dnVersion7_Prog
		
		*Falls wir auf dem Terminalserver sind:
		 lvTemp = VAL(OS(10))
		 IF BITAND(m.lvTemp,16+256)#0 THEN
		*Bitmap OFF
		*  SYS(602,0)
		 ENDIF &&BITAND(m.lvTemp,16+256)#0
		
		 ON KEY LABEL ALT+F10 *
		 SYS(2450,0)
		ENDWITH &&THIS
		
	ENDPROC

	PROCEDURE set_private		&& Setze Einstellungen, die für eine private DATASESSION gelten. Wird für jede Form mit privater Datasession durchgeführt.
		LOCAL;
		 lvTemp AS VARIANT
		
		WITH THIS
		*-- eigentlich Global, aber hier sinnvoller
		*off
		 #IF .F. THEN
		  DO CASE
		   CASE TYPE(dcApp)#T_Object
		   CASE SET('HELP')='OFF'
		   CASE TYPE('THISFORM')#T_Object
		   CASE !EMPTY(THISFORM.HELPCONTEXTID)
		   OTHERWISE
		    THISFORM.HELPCONTEXTID = 10
		  ENDCASE
		 #ENDIF &&.F.
		
		*damit es im Debugmode immer wieder angeht ...
		 SET ASSERTS ON 							&&Standard OFF
		
		*-- privater Teil
		 SET ANSI OFF								&&Standard OFF
		
		 SET AUTOSAVE OFF							&&Standard OFF
		
		 SET BLOCKSIZE TO 64						&&Standard 64
		
		 SET CARRY OFF								&&Standard OFF
		
		 SET COLLATE TO 'MACHINE'					&&Standard 'MACHINE'
		
		 SET CONFIRM ON								&&Standard ON
		
		* SET DATABASE TO							&&erledigt die Form selbstständig
		
		 SET DELETED ON								&&Standard OFF
		
		 SET EXACT OFF								&&Standard OFF
		
		 SET EXCLUSIVE OFF							&&Standard OFF
		
		 SET FIXED ON								&&Standard OFF
		
		 SET LOCK OFF								&&Standard OFF
		
		 SET MEMOWIDTH TO 8192						&&Standard 50
		
		 SET MULTILOCKS ON							&&Standard OFF
		
		 SET NEAR OFF								&&Standard OFF
		
		 SET NULL OFF								&&Standard OFF
		
		 SET REPROCESS TO -1						&&Standard 0
		 SET REPROCESS TO -1 SYSTEM					&&Standard 0
		
		 SET SAFETY OFF								&&Standard ON
		
		 SET TALK NOWINDOW							&&Standard NOWINDOW
		 SET TALK OFF								&&Standard ON
		
		 SET UNIQUE OFF								&&Standard OFF
		
		 #IFNDEF dnVersion7_Prog
		  SET AUTOINCERROR ON						&&Standard ON
		 #ENDIF &&dnVersion7_Prog
		
		 #IFNDEF dnVersion8_Prog THEN
		  SET TABLEPROMPT OFF						&&Standard ON (Prompt for Table)
		  SET VARCHARMAPPING OFF						&&Standard OFF
		 #ENDIF &&dnVersion8_Prog
		
		*Einstellungen die Länderspezifisch sind lesen
		 SET SYSFORMATS ON							&&Standard OFF
		*wenn sich die Systemeinstellungen ändern, Änderung ignorieren
		 SET SYSFORMATS OFF
		
		*Zwischen SET SYSFORMATS und den folgenden Einstellungen (bis zum Ende) gibt es Wechselwirkungen,
		*siehe Hilfe SET SYSFORMAT
		
		*Ab Hier Einstellbar?
		
		 SET CURRENCY LEFT							&&Standard LEFT
		* SET CURRENCY TO doH.gcCurrency 			&&STANDARD '$'
		
		* SET DECIMALS TO doH.gnDecimals				&&Standard 2
		
		* SET POINT TO 								&&Standard 		auf SYSFORMAT
		
		*Date von SYSFORMAT lösen (um Jahrtausend anzuzeigen)
		 lvTemp = SET('DATE',1)
		 DO CASE
		  CASE m.lvTemp=0
		   SET DATE MDY
		  CASE m.lvTemp=1
		   SET DATE DMY
		  CASE m.lvTemp=2
		   SET DATE YMD
		 ENDCASE
		
		*Zwischen SET DATE und den folgenden Einstellungen (bis zum Ende) gibt es Wechselwirkungen,
		*siehe Hilfe SET DATE
		 SET CENTURY ON								&&Standard ON
		*evtl später nocheinmal wegen TO und ROLLOVER nachdenken
		
		* SET HOURS TO 12							&&Standard 12	hier aber auf SYSFORMAT
		
		 SET SECONDS OFF							&&Standard ON
		
		 SET MARK TO '.'							&&Standard /
		
		
		ENDWITH &&THIS
		
	ENDPROC

	PROCEDURE store_		&& Speichert die Einstellungen der SET Befehle.
		LPARAMETERS;
		 tnSet
		
		IF PCOUNT()=0 OR VARTYPE(tnSet)#'N' THEN
		 tnSet = 2^0
		ENDIF &&PCOUNT()=0 OR VARTYPE(tnSet)#'N'
		
		*-- SET- und ON-Befehle einstellen
		WITH THIS
		 .rnSetting = .rnSetting+1
		
		 DIMENSION;
		  .raSettings(.rnSetting,4)
		
		 .raSettings(.rnSetting,1) = NIL
		 .raSettings(.rnSetting,2) = False
		 .raSettings(.rnSetting,3) = False
		 .raSettings(.rnSetting,4) = False
		
		* .goGlobal
		 #IFNDEF dnVersion7_Prog THEN
		  .raSettings(.rnSetting,1) = CREATEOBJECT('EMPTY')
		 #ELSE &&dnVersion7_Prog
		  .raSettings(.rnSetting,1) = CREATEOBJECT('RELATION')
		 #ENDIF &&dnVersion7_Prog
		
		 IF BITAND(m.tnSet,2^2)=2^2 THEN
		  PUSH MENU _MSYSMENU
		  .raSettings(.rnSetting,4) = True
		 ENDIF &&BITAND(m.tnSet,2^2)=2^2
		
		 IF BITAND(m.tnSet,2^0+2^1)>0 THEN
		*Privat auch speichern wenn global
		  .Store_Private(.raSettings(.rnSetting,1))
		  .raSettings(.rnSetting,2) = True
		 ENDIF &&BITAND(m.tnSet,2^0+2^1)>0
		 IF BITAND(m.tnSet,2^1)=2^1 THEN
		  .Store_Global(.raSettings(.rnSetting,1))
		  .raSettings(.rnSetting,3) = True
		 ENDIF &&BITAND(m.tnSet,2^1)=2^1
		
		 RETURN .rnSetting
		ENDWITH &&THIS
		
	ENDPROC

	PROCEDURE store_global		&& Speichert Einstellungen die für das ganze Programm, unabhängig von DATASESSION gelten. (Wird einmal für das Programm durchgeführt)
		LPARAMETERS;
		 toObject
		
		ADDPROPERTY(toObject,'gcOldAlternate'              ,SET("ALTERNATE")      )
		ADDPROPERTY(toObject,'gcOldAlternate_FName'        ,SET("ALTERNATE",1)    )
		ADDPROPERTY(toObject,'gcOldAsserts'                ,SET("ASSERTS")        )
		ADDPROPERTY(toObject,'gcOldBell'                   ,SET("BELL")           )
		ADDPROPERTY(toObject,'gcOldBell_FName'             ,SET("BELL",1)         )
		ADDPROPERTY(toObject,'gcOldBrowseIME'              ,SET("BROWSEIME")      )
		ADDPROPERTY(toObject,'gcOldClasslib'               ,SET("CLASSLIB")       )
		ADDPROPERTY(toObject,'gcOldClock'                  ,SET("CLOCK")          )
		ADDPROPERTY(toObject,'gcOldClock_Coord'            ,SET("CLOCK",1)        )
		ADDPROPERTY(toObject,'gcOldCompatible'             ,SET("COMPATIBLE")     )
		ADDPROPERTY(toObject,'gcOldCompatible_Prompt'      ,SET("COMPATIBLE",1)   )
		ADDPROPERTY(toObject,'gcOldConsole'                ,SET("CONSOLE")        )
		ADDPROPERTY(toObject,'gcOldCoverage'               ,SET("COVERAGE")       )
		ADDPROPERTY(toObject,'gcOldCpDialog'               ,SET("CPDIALOG")       )
		ADDPROPERTY(toObject,'gcOldCursor'                 ,SET("CURSOR")         )
		ADDPROPERTY(toObject,'gcOldDefault'                ,SYS(5)+SYS(2003)      )	&&besser als SET("DEFAULT")
		ADDPROPERTY(toObject,'gcOldDevice'                 ,SET("DEVICE")         )
		ADDPROPERTY(toObject,'gcOldDisplay'                ,SET("DISPLAY")        )
		ADDPROPERTY(toObject,'gcOldEscape'                 ,SET("ESCAPE")         )
		ADDPROPERTY(toObject,'gcOldEventList'              ,SET("EVENTLIST")      )
		ADDPROPERTY(toObject,'gcOldEventTracking'          ,SET("EVENTTRACKING")  )
		ADDPROPERTY(toObject,'gcOldEventTracking_FName'    ,SET("EVENTTRACKING",1))
		ADDPROPERTY(toObject,'gnOldFDoW'                   ,SET("FDOW")           )
		ADDPROPERTY(toObject,'gcOldFullPath'               ,SET("FULLPATH")       )
		ADDPROPERTY(toObject,'gnOldFWeek'                  ,SET("FWEEK")          )
		ADDPROPERTY(toObject,'gcOldHeadings'               ,SET("HEADINGS")       )
		ADDPROPERTY(toObject,'gcOldHelp'                   ,SET("HELP")           )
		ADDPROPERTY(toObject,'gcOldHelp_FName'             ,SET("HELP",1)         )
		ADDPROPERTY(toObject,'gcOldKeyComp'                ,SET("KEYCOMP")        )
		ADDPROPERTY(toObject,'gnOldLanguageOptions'        ,_VFP.LANGUAGEOPTIONS  )
		ADDPROPERTY(toObject,'gcOldLibrary'                ,SET("LIBRARY")        )
		ADDPROPERTY(toObject,'gnOldMousePointer'           ,_SCREEN.MOUSEPOINTER  )
		ADDPROPERTY(toObject,'gcOldNotify'                 ,SET("NOTIFY")         )
		ADDPROPERTY(toObject,'gcOldNullDisplay'            ,SET("NULLDISPLAY")    )
		ADDPROPERTY(toObject,'gnOldOdoMeter'               ,SET("ODOMETER")       )
		ADDPROPERTY(toObject,'gcOldOLEObject'              ,SET("OLEOBJECT")      )
		ADDPROPERTY(toObject,'gcOldOptimize'               ,SET("OPTIMIZE")       )
		ADDPROPERTY(toObject,'gcOldPalette'                ,SET("PALETTE")        )
		ADDPROPERTY(toObject,'gcOldPath'                   ,SET("PATH")           )
		ADDPROPERTY(toObject,'gcOldPrinter'                ,SET("PRINTER")        )
		ADDPROPERTY(toObject,'gcOldPrinter_PortName'       ,SET("PRINTER",1)      )
		ADDPROPERTY(toObject,'gcOldPrinter_WinDefa'        ,SET("PRINTER",2)      )
		*ADDPROPERTY(toObject,'gcOldPrinter_FoxDefa'        ,SET("PRINTER",3)      )
		ADDPROPERTY(toObject,'gcOldProcedure'              ,SET("PROCEDURE")      )
		ADDPROPERTY(toObject,'gnOldRefresh'                ,SET("REFRESH")        )
		ADDPROPERTY(toObject,'gnOldRefresh_Buffer'         ,SET("REFRESH",1)      )
		ADDPROPERTY(toObject,'gcOldResource'               ,SET("RESOURCE")       )
		ADDPROPERTY(toObject,'gcOldResource_FName'         ,SET("RESOURCE",1)     )
		ADDPROPERTY(toObject,'gcOldSpace'                  ,SET("SPACE")          )
		ADDPROPERTY(toObject,'gcOldStatus'                 ,SET("STATUS")         )
		ADDPROPERTY(toObject,'gcOldStatusBar'              ,SET("STATUS BAR")     )
		ADDPROPERTY(toObject,'gnOldStrictDate'             ,SET("STRICTDATE")     )
		ADDPROPERTY(toObject,'gnOldTypeAhead'              ,SET("TYPEAHEAD")      )
		ADDPROPERTY(toObject,'gcOldUDFParms'               ,SET("UDFPARMS")       )
		
		ADDPROPERTY(toObject,'gcOldDir'                    ,FULLPATH(CURDIR())    )
		
		ADDPROPERTY(toObject,'gcOldOnShutDown'             ,ON ("SHUTDOWN")       )
		ADDPROPERTY(toObject,'gcOldOnError'                ,ON ("ERROR")          )
		ADDPROPERTY(toObject,'gcOldOnEscape'               ,ON ("ESCAPE")         )
		ADDPROPERTY(toObject,'gcOldOnPage'                 ,ON ("PAGE")           )
		
		ADDPROPERTY(toObject,'gcOldScreenCaption'          ,_SCREEN.CAPTION       )
		ADDPROPERTY(toObject,'gcOldScreenIcon'             ,_SCREEN.ICON          )
		
		WITH toObject
		 IF .gcOldPoint=',' THEN
		  .gcOldClock_Coord = ;
		   STRTRAN(SUBSTR(.gcOldClock_Coord,1,AT(',',.gcOldClock_Coord,2)-1),',','.')+','+;
		   STRTRAN(SUBSTR(.gcOldClock_Coord,AT(',',.gcOldClock_Coord,2)+1),',','.')
		 ELSE &&.gcOldPoint=','
		  .gcOldClock_Coord = STRTRAN(.gcOldClock_Coord,.gcOldPoint,'.')
		 ENDIF &&.gcOldPoint=','
		ENDWITH &&toObject
		
		#IFNDEF dnVersion7_Prog
		 ADDPROPERTY(toObject,'gnOldEngineBehavior'        ,SET("EngineBehavior") )
		 ADDPROPERTY(toObject,'gnOldTableValidate'         ,SET("TableValidate")  )
		 ADDPROPERTY(toObject,'gcOldNotifyCursor'          ,SET("Notify",1)       )
		 ADDPROPERTY(toObject,'glOldThemes'                ,_SCREEN.THEMES        )
		#ENDIF &&dnVersion7_Prog
		
		#IFNDEF dnVersion8_Prog THEN
		 ADDPROPERTY(toObject,'gnOldReportBehavior'        ,SET("REPORTBEHAVIOR") )
		 ADDPROPERTY(toObject,'gnOldReportOutput'          ,_REPORTOUTPUT )
		 ADDPROPERTY(toObject,'gnOldReportPreview'         ,_REPORTPREVIEW)
		 ADDPROPERTY(toObject,'gnOldReportBuilder'         ,_REPORTBUILDER)
		#ENDIF &&dnVersion8_Prog
		
		ADDPROPERTY(toObject,'goLabel'                     ,CREATEOBJECT('EMPTY') )
		ADDPROPERTY(toObject.goLabel,'Alt_F10'             ,ON('Key','Alt+F10')   )
		
		ADDPROPERTY(toObject,'gnSys_0602'                  ,VAL(SYS(0602))        )
		ADDPROPERTY(toObject,'gnSys_2450'                  ,VAL(SYS(2450))        )
		ADDPROPERTY(toObject,'gnSys_2700'                  ,VAL(SYS(2700))        )
		
		*not for this project
		*THIS.Store_ToolBars(toObject)
		
	ENDPROC

	PROCEDURE store_private		&& Speichert Einstellungen die für eine private DATASESSION gelten. Wird für jede Form mit privater Datasession durchgeführt.
		LPARAMETERS;
		 toObject
		
		ADDPROPERTY(toObject,'gcOldAnsi'                   ,SET("ANSI")          )
		ADDPROPERTY(toObject,'gcOldAutoSave'               ,SET("AUTOSAVE")      )
		ADDPROPERTY(toObject,'gnOldBlockSize'              ,SET("BLOCKSIZE")     )
		ADDPROPERTY(toObject,'gcOldCarry'                  ,SET("CARRY")         )
		ADDPROPERTY(toObject,'gcOldCentury'                ,SET("CENTURY")       )
		ADDPROPERTY(toObject,'gnOldCentury_nCentury'       ,SET("CENTURY",1)     )
		ADDPROPERTY(toObject,'gnOldCentury_nRollOver'      ,SET("CENTURY",2)     )
		ADDPROPERTY(toObject,'gcOldCollate'                ,SET("COLLATE")       )
		ADDPROPERTY(toObject,'gcOldConfirm'                ,SET("CONFIRM")       )
		ADDPROPERTY(toObject,'gcOldCurrency'               ,SET("CURRENCY")      )
		ADDPROPERTY(toObject,'gcOldCurrency_Symbol'        ,SET("CURRENCY",1)    )
		ADDPROPERTY(toObject,'gcOldDatabase'               ,DBC()                )
		ADDPROPERTY(toObject,'gcOldDate'                   ,SET("DATE")          )
		ADDPROPERTY(toObject,'gnOldDateOrder'              ,SET("DATE",1)        )
		ADDPROPERTY(toObject,'gnOldDecimals'               ,SET("DECIMALS")      )
		ADDPROPERTY(toObject,'gcOldDeleted'                ,SET("DELETED")       )
		ADDPROPERTY(toObject,'gcOldExact'                  ,SET("EXACT")         )
		ADDPROPERTY(toObject,'gcOldExclusive'              ,SET("EXCLUSIVE")     )
		ADDPROPERTY(toObject,'gcOldFixed'                  ,SET("FIXED")         )
		ADDPROPERTY(toObject,'gnOldHours'                  ,SET("HOURS")         )
		ADDPROPERTY(toObject,'gcOldLock'                   ,SET("LOCK")          )
		ADDPROPERTY(toObject,'gcOldMark'                   ,SET("MARK")          )
		ADDPROPERTY(toObject,'gnOldMemoWidth'              ,SET("MEMOWIDTH")     )
		ADDPROPERTY(toObject,'gcOldMultiLocks'             ,SET("MULTILOCKS")    )
		ADDPROPERTY(toObject,'gcOldNear'                   ,SET("NEAR")          )
		ADDPROPERTY(toObject,'gcOldNull'                   ,SET("NULL")          )
		ADDPROPERTY(toObject,'gcOldPoint'                  ,SET("POINT")         )
		ADDPROPERTY(toObject,'gnOldReprocess'              ,SET("REPROCESS")     )
		#IFNDEF dnVersion8_Prog THEN
		 ADDPROPERTY(toObject,'gnOldReprocessMode'         ,SET("REPROCESS",2)   )
		 ADDPROPERTY(toObject,'gnOldReprocess_S'           ,SET("REPROCESS",1)   )
		 ADDPROPERTY(toObject,'gnOldReprocessMode_S'       ,SET("REPROCESS",3)   )
		#ENDIF &&dnVersion8_Prog
		ADDPROPERTY(toObject,'gcOldSafety'                 ,SET("SAFETY")        )
		ADDPROPERTY(toObject,'gcOldSeconds'                ,SET("SECONDS")       )
		ADDPROPERTY(toObject,'gcOldSysFormats'             ,SET("SYSFORMATS")    )
		ADDPROPERTY(toObject,'gcOldTalk'                   ,SET("TALK")          )
		ADDPROPERTY(toObject,'gcOldTalk_Window'            ,SET("TALK",1)        )
		ADDPROPERTY(toObject,'gcOldUnique'                 ,SET("UNIQUE")        )
		
		#IFNDEF dnVersion7_Prog THEN
		 ADDPROPERTY(toObject,'gcOldAutoIncError'          ,SET("AUTOINCERROR")  )
		#ENDIF &&dnVersion7_Prog
		
		#IFNDEF dnVersion8_Prog THEN
		 ADDPROPERTY(toObject,'gcOldTablePrompt'           ,SET("TABLEPROMPT")   )
		 ADDPROPERTY(toObject,'gcOldVarCharMapping'        ,SET("VARCHARMAPPING"))
		#ENDIF &&dnVersion8_Prog
		
	ENDPROC

	PROCEDURE store_toolbars		&& Speichert die sichtbarkeit der Standard-Toolbars und verbirgt diese.
		LPARAMETERS;
		 toObject
		
		*-- Gibt alle Visual FoxPro-Symbolleisten frei, bei alleinlaufender exe werden diese gelöscht.
		LOCAL ;
		 lnLoop AS INTEGER
		
		ADDPROPERTY(toObject,'gaToolBars(15,5)')
		
		WITH toObject
		 .gaToolBars( 1,1) = dcTB_COLORPALETTE_LOC
		 .gaToolBars( 1,2) = dcTB_COLORPALETTE_LOC_UK
		 .gaToolBars( 1,3) = [D]
		* .gaToolBars( 1,3) = [{DNARROW}]
		 .gaToolBars( 2,1) = dcTB_DATADESIGNER_LOC
		 .gaToolBars( 2,2) = dcTB_DATADESIGNER_LOC_UK4
		 .gaToolBars( 2,3) = [D]
		* .gaToolBars( 2,3) = [{DNARROW}]
		 .gaToolBars( 3,1) = dcTB_DEBUGGER_LOC
		 .gaToolBars( 3,2) = dcTB_DEBUGGER_LOC_UK
		 .gaToolBars( 3,3) = [F]
		*.gaToolBars( 3,3) = [{END}]
		 .gaToolBars( 4,1) = dcTB_FORMCONTROLS_LOC
		 .gaToolBars( 4,2) = dcTB_FORMCONTROLS_LOC_UK
		 .gaToolBars( 4,3) = [F]
		* .gaToolBars( 4,3) = [{UPARROW}]
		 .gaToolBars( 5,1) = dcTB_FORMDESIGNER_LOC
		 .gaToolBars( 5,2) = dcTB_FORMDESIGNER_LOC_UK
		 .gaToolBars( 5,3) = [L]
		* .gaToolBars( 5,3) = [{UPARROW}]
		 .gaToolBars( 6,1) = dcTB_LAYOUT_LOC
		 .gaToolBars( 6,2) = dcTB_LAYOUT_LOC_UK
		 .gaToolBars( 6,3) = [P]
		* .gaToolBars( 6,3) = [{UPARROW}]
		 .gaToolBars( 7,1) = dcTB_PRINTPREVIEW_LOC
		 .gaToolBars( 7,2) = dcTB_PRINTPREVIEW_LOC_UK
		 .gaToolBars( 7,3) = [Q]
		* .gaToolBars( 7,3) = [{UPARROW}]
		 .gaToolBars( 8,1) = dcTB_QUERY_LOC
		 .gaToolBars( 8,2) = dcTB_QUERY_LOC_UK
		 .gaToolBars( 8,3) = [R]
		* .gaToolBars( 8,3) = [{UPARROW}]
		 .gaToolBars( 9,1) = dcTB_REPOCONTROLS_LOC
		 .gaToolBars( 9,2) = dcTB_REPOCONTROLS_LOC_UK
		 .gaToolBars( 9,3) = [R]
		* .gaToolBars( 9,3) = [{UPARROW}]
		 .gaToolBars(10,2) = dcTB_REPODESIGNER_LOC_UK
		 .gaToolBars(10,1) = dcTB_REPODESIGNER_LOC
		 .gaToolBars(10,3) = [S]
		* .gaToolBars(10,3) = [{UPARROW}]
		 .gaToolBars(11,1) = dcTB_STANDARD_LOC
		 .gaToolBars(11,2) = dcTB_STANDARD_LOC_UK
		 .gaToolBars(11,3) = [V]
		* .gaToolBars( 1,3) = [{UPARROW}]
		 .gaToolBars(12,1) = dcTB_VIEWDESIGNER_LOC
		 .gaToolBars(12,2) = dcTB_VIEWDESIGNER_LOC_UK
		 .gaToolBars(12,3) = []
		* .gaToolBars(12,3) = [{UPARROW}]
		
		 .gaToolBars(13,1) = dcWIN_COMMAND_LOC
		 .gaToolBars(13,2) = dcWIN_COMMAND_LOC
		 .gaToolBars(14,1) = dcWIN_Properties_LOC
		 .gaToolBars(14,2) = dcWIN_Properties_LOC
		 .gaToolBars(15,1) = dcWIN_Document_LOC
		 .gaToolBars(15,2) = dcWIN_Document_LOC
		
		 FOR lnLoop = 1 TO ALEN(.gaToolBars, 1)
		  IF WEXIST(.gaToolBars(lnLoop,2)) THEN
		   .gaToolBars(lnLoop,1) = .gaToolBars(lnLoop,2)
		  ENDIF &&WEXIST(.gaToolBars(lnLoop,2))
		
		  .gaToolBars(lnLoop,4) = WEXIST(.gaToolBars(lnLoop,1))
		  .gaToolBars(lnLoop,5) = WVISIBLE(.gaToolBars(lnLoop,1))
		
		  DO CASE
		   CASE !.gaToolBars(lnLoop,4)
		   CASE APPLICATION.STARTMODE#0
		    RELEASE WINDOW (.gaToolBars(lnLoop,1))
		    .gaToolBars(lnLoop,4) = False
		   CASE INLIST(.gaToolBars(lnLoop,1),dcTB_STANDARD_LOC_UK,dcTB_DEBUGGER_LOC_UK)
		   CASE INLIST(lnLoop,13,14,15)
		    HIDE WINDOW (.gaToolBars(lnLoop,1))
		   OTHERWISE
		    HIDE WINDOWS (.gaToolBars(lnLoop,2))
		    *bis das wiederherstellen funktioniert:
		 *  RELEASE WINDOWS (.gaToolBars(lnLoop,2))
		  ENDCASE
		 ENDFOR &&lnLoop
		ENDWITH &&toObject
		
	ENDPROC

ENDDEFINE
