<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="de" lang="de">
<head>
<title>Method Init of class api_apprun</title>
<meta content="text/html; charset=windows-1252" http-equiv="Content-Type" />
<meta name="Generator" content="Project Documenting Machine" />
<meta name="Version" content="1.3.3" />
<link rel="stylesheet" href="../../css/foxw.css" type="text/css" />
<link rel="stylesheet" href="../../css/sc.css" type="text/css" />
<link rel="stylesheet" href="../../repository/diamp_pdm_ab.css" type="text/css" />
<link rel="stylesheet" href="../../repository/pdm_ab.css" type="text/css" />
<link rel="stylesheet" href="../../repository/pdm_ab_notes.css" type="text/css" />
<script src="../../js/pdm.js" language="JavaScript" type="text/javascript"></script>
<script src="../../repository/pdm_ab.js" language="JavaScript" type="text/javascript"></script>
</head>
<body>
<div class="diaxp_mhead">Init Method</div>
<div class="diaxp_mbody_class">

<table class="clear_table">
 <tbody>
  <tr><td>Class: </td><td><a href="cls.api_apprun.htm" title="Skip to class api_apprun">api_apprun</a></td></tr>
  <tr><td>Description:</td><td>Occurs when an object is created.</td></tr>
 </tbody>
</table>
</div>
<div class="diaxp_mbody">
 <div class="SC">
  <img onclick="ExpandSC('SP_3',-1);"class="imgEC" src="../../imgs/dotab.gif" alt="Expand/Collapse source code of procedure Init" id="IMG_SP_3" />
  <span ondblclick="ExpandSC('SP_3',-1);" class="SCCaption"><a name="api_apprun">Source Code</a></span>
  <div ondblclick="ExpandSC('SP_3',-1);" class="SCE" style="display: none;" id="TX_SP_3">
<!-- Code Begin -->
<pre class="PDMCODE PDMNor" ><span class='PDMCnt'>  1</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*</span>
<span class='PDMCnt'>  2</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    API_AppRun - use the CreateProcess() API to launch, monitor, and kill an Executable</span>
<span class='PDMCnt'>  3</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*</span>
<span class='PDMCnt'>  4</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    Properties:</span>
<span class='PDMCnt'>  5</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*</span>
<span class='PDMCnt'>  6</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    inProcessHandle            (P)    ProcessHandle generated by CreateProcess()</span>
<span class='PDMCnt'>  7</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    inThreadHandle            (P) ThreadHandle for First Thread of inProcessHandle</span>
<span class='PDMCnt'>  8</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    icErrorMessage            R/O Error Message Detailed Description</span>
<span class='PDMCnt'>  9</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    icCommandLine            R/W Command Line to launch via CreateProcess()</span>
<span class='PDMCnt'> 10</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    icLaunchDir                R/W Directory to use as startup dir for CreateProcess()</span>
<span class='PDMCnt'> 11</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    icWindowMode            R/W Window Start Mode, one of (HID, NOR, MIN, MAX) or empty</span>
<span class='PDMCnt'> 12</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*                            defaults to empty, the default for the executable is used</span>
<span class='PDMCnt'> 13</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*</span>
<span class='PDMCnt'> 14</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    Methods:</span>
<span class='PDMCnt'> 15</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*</span>
<span class='PDMCnt'> 16</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    Init                    (O) Command Line, (O) Start Dir, (O) Window Start Mode</span>
<span class='PDMCnt'> 17</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*                            If sent, the icCommandLine, icLaunchDir and icWindowMode properties are set</span>
<span class='PDMCnt'> 18</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    Destroy</span>
<span class='PDMCnt'> 19</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    LaunchApp                // Launches .icComandLine from .icLaunchDir in .icWindowMode</span>
<span class='PDMCnt'> 20</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*                            // NB - at least .icCommandLine must be set to not fail</span>
<span class='PDMCnt'> 21</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*                            RETURNS: BOOL, check icErrorMessage on .F.</span>
<span class='PDMCnt'> 22</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    LaunchAppAndWait        // Call LaunchApp() and wait on either user termination or process termination</span>
<span class='PDMCnt'> 23</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*                            RETURNS: BOOL, check icErrorMessage on .F.</span>
<span class='PDMCnt'> 24</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    CheckProcessExitCode    (O) Process handle to check, defaults to .inProcessHandle</span>
<span class='PDMCnt'> 25</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*                            // Get Process named by Process Handle's Exit Code (259 = still running)</span>
<span class='PDMCnt'> 26</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*                            RETURNS:  Integer, check on NULL, if NULL, check icErrorMessage</span>
<span class='PDMCnt'> 27</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    ExtractDWORD            (R) String to convert</span>
<span class='PDMCnt'> 28</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*                            //Converts a 4 byte or longer string to a DWORD integer</span>
<span class='PDMCnt'> 29</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*                            RETURNS:  Integer, check on NULL, if NULL arg was invalid</span>
<span class='PDMCnt'> 30</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    KillProc                (O) Process handle to Terminate, defaults to .inProcessHandle</span>
<span class='PDMCnt'> 31</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*                            // Kills specified process using TerminateProcess()</span>
<span class='PDMCnt'> 32</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*                            RETURNS:  BOOL, check icErrorMessage on .F.</span>
<span class='PDMCnt'> 33</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    GetProcHandle            //  Returns the Process Handle for the current Process</span>
<span class='PDMCnt'> 34</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*                            // NB - only useful for KillProc(), since Destroy will close the handle</span>
<span class='PDMCnt'> 35</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*                            RETURNS:  Integer, check for NULL, if NULL no process was started yet</span>
<span class='PDMCnt'> 36</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    ParsePROCESSINFOStruc    // Pulls the Process Handle and Thread Handle from the PROCESSINFO structure</span>
<span class='PDMCnt'> 37</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*                            // Only used internally</span>
<span class='PDMCnt'> 38</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    ReleaseHandle            (R)  Handle to Close</span>
<span class='PDMCnt'> 39</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*                            //  Invokes CloseHandle() to explicitly release process/thread handles</span>
<span class='PDMCnt'> 40</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*                            //  Only used internally, but can be externalized</span>
<span class='PDMCnt'> 41</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*                            RETURNS:  BOOL, check .icErrorMessage if false</span>
<span class='PDMCnt'> 42</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*</span>
<span class='PDMCnt'> 43</span> <span class='PDMInd'>  </span> <span class='PDMResK'>LPARAMETERS</span> <span class='PDMVar'>tcCommandLine</span><span class='PDMOper'>,</span> <span class='PDMVar'>tcLaunchDir</span><span class='PDMOper'>,</span> <span class='PDMVar'>tcWindowMode</span>
<span class='PDMCnt'> 44</span> <span class='PDMInd'>  </span> <span class='PDMCom'>*    Set up the environment for the object</span>
<span class='PDMCnt'> 45</span> <span class='PDMInd'>  </span> <span class='PDMResK'>LOCAL</span> <span class='PDMVar'>aDirTest</span><span class='PDMOper'>[</span><span class='PDMLit'>1</span><span class='PDMOper'>,</span><span class='PDMLit'>5</span><span class='PDMOper'>]</span>
<span class='PDMCnt'> 46</span> <span class='PDMInd'>  </span> <span class='PDMResK'>WITH</span> <span class='PDMResK'>THIS</span>
<span class='PDMCnt'> 47</span> <span class='PDMInd'> 1</span>     <span class='PDMOper'>.</span><span class='PDMVar'>icErrorMessage</span> <span class='PDMOper'>=</span> <span class='PDMStr'>''</span>
<span class='PDMCnt'> 48</span> <span class='PDMInd'> 1</span>     <span class='PDMOper'>.</span><span class='PDMVar'>icCommandLine</span> <span class='PDMOper'>=</span> <span class='PDMStr'>''</span>
<span class='PDMCnt'> 49</span> <span class='PDMInd'> 1</span>     <span class='PDMOper'>.</span><span class='PDMVar'>icLaunchDir</span> <span class='PDMOper'>=</span> <span class='PDMStr'>''</span>
<span class='PDMCnt'> 50</span> <span class='PDMInd'> 1</span>     <span class='PDMOper'>.</span><span class='PDMVar'>icWindowMode</span> <span class='PDMOper'>=</span> <span class='PDMStr'>''</span>
<span class='PDMCnt'> 51</span> <span class='PDMInd'> 1</span>     <span class='PDMOper'>.</span><span class='PDMVar'>inProcessHandle</span> <span class='PDMOper'>=</span> <span class='PDMResK'>NULL</span>
<span class='PDMCnt'> 52</span> <span class='PDMInd'> 1</span>     <span class='PDMOper'>.</span><span class='PDMVar'>inThreadHandle</span> <span class='PDMOper'>=</span> <span class='PDMResK'>NULL</span>
<span class='PDMCnt'> 53</span> <span class='PDMInd'> 1</span> <span class='PDMCom'>    * store parameters if passed</span>
<span class='PDMCnt'> 54</span> <span class='PDMInd'> 1</span>     <span class='PDMResK'>IF</span> <span class='PDMResF'>TYPE</span><span class='PDMOper'>(</span><span class='PDMStr'>'tcCommandLine'</span><span class='PDMOper'>)</span> <span class='PDMOper'>=</span> <span class='PDMStr'>'C'</span>
<span class='PDMCnt'> 55</span> <span class='PDMInd'> 2</span>         <span class='PDMOper'>.</span><span class='PDMVar'>icCommandLine</span> <span class='PDMOper'>=</span> <span class='PDMResF'>ALLTRIM</span><span class='PDMOper'>(</span><span class='PDMVar'>tcCommandLine</span><span class='PDMOper'>)</span>
<span class='PDMCnt'> 56</span> <span class='PDMInd'> 1</span>     <span class='PDMResK'>ENDIF</span>
<span class='PDMCnt'> 57</span> <span class='PDMInd'> 1</span>     <span class='PDMResK'>DO</span> <span class='PDMResK'>CASE</span>
<span class='PDMCnt'> 58</span> <span class='PDMInd'> 1</span>     <span class='PDMResK'>CASE</span> <span class='PDMResF'>TYPE</span><span class='PDMOper'>(</span><span class='PDMStr'>'tcLaunchDir'</span><span class='PDMOper'>)</span> <span class='PDMOper'>#</span> <span class='PDMStr'>'C'</span>
<span class='PDMCnt'> 59</span> <span class='PDMInd'> 2</span> <span class='PDMCom'>        *    Not a character expression - ignore</span>
<span class='PDMCnt'> 60</span> <span class='PDMInd'> 1</span>     <span class='PDMResK'>CASE</span> <span class='PDMResF'>ADIR</span><span class='PDMOper'>(</span><span class='PDMVar'>aDirTest</span><span class='PDMOper'>,</span> <span class='PDMVar'>tcLaunchDir</span><span class='PDMOper'>,</span> <span class='PDMStr'>'D'</span><span class='PDMOper'>)</span> <span class='PDMOper'>#</span> <span class='PDMLit'>1</span>
<span class='PDMCnt'> 61</span> <span class='PDMInd'> 2</span> <span class='PDMCom'>        *    Either directory doesn't exist, or there's a wildcard in the expression</span>
<span class='PDMCnt'> 62</span> <span class='PDMInd'> 2</span>         <span class='PDMOper'>.</span><span class='PDMVar'>icErrorMessage</span> <span class='PDMOper'>=</span> <span class='PDMStr'>'Invalid directory for startup passed to Init method'</span>
<span class='PDMCnt'> 63</span> <span class='PDMInd'> 1</span>     <span class='PDMResK'>OTHERWISE</span>
<span class='PDMCnt'> 64</span> <span class='PDMInd'> 2</span> <span class='PDMCom'>        *    Valid directory - save it</span>
<span class='PDMCnt'> 65</span> <span class='PDMInd'> 2</span>         <span class='PDMOper'>.</span><span class='PDMVar'>icLaunchDir</span> <span class='PDMOper'>=</span> <span class='PDMResF'>ALLTRIM</span><span class='PDMOper'>(</span><span class='PDMVar'>tcLaunchDir</span><span class='PDMOper'>)</span>
<span class='PDMCnt'> 66</span> <span class='PDMInd'> 1</span>     <span class='PDMResK'>ENDCASE</span>
<span class='PDMCnt'> 67</span> <span class='PDMInd'> 1</span>     <span class='PDMResK'>DO</span> <span class='PDMResK'>CASE</span>
<span class='PDMCnt'> 68</span> <span class='PDMInd'> 1</span>     <span class='PDMResK'>CASE</span> <span class='PDMResF'>TYPE</span><span class='PDMOper'>(</span><span class='PDMStr'>'tcWindowMode'</span><span class='PDMOper'>)</span> <span class='PDMOper'>#</span> <span class='PDMStr'>'C'</span>
<span class='PDMCnt'> 69</span> <span class='PDMInd'> 2</span> <span class='PDMCom'>        *    Not passed in or not valid type</span>
<span class='PDMCnt'> 70</span> <span class='PDMInd'> 1</span>     <span class='PDMResK'>CASE</span> <span class='PDMResF'>INLIST</span><span class='PDMOper'>(</span><span class='PDMResF'>PADR</span><span class='PDMOper'>(</span><span class='PDMResF'>UPPER</span><span class='PDMOper'>(</span><span class='PDMResF'>ALLTRIM</span><span class='PDMOper'>(</span><span class='PDMVar'>tcWindowMode</span><span class='PDMOper'>)</span><span class='PDMOper'>)</span><span class='PDMOper'>,</span><span class='PDMLit'>3</span><span class='PDMOper'>)</span><span class='PDMOper'>,</span><span class='PDMStr'>'NOR'</span><span class='PDMOper'>,</span><span class='PDMStr'>'MIN'</span><span class='PDMOper'>,</span><span class='PDMStr'>'MAX'</span><span class='PDMOper'>,</span><span class='PDMStr'>'HID'</span><span class='PDMOper'>)</span>
<span class='PDMCnt'> 71</span> <span class='PDMInd'> 2</span> <span class='PDMCom'>        *    Valid mode - set it</span>
<span class='PDMCnt'> 72</span> <span class='PDMInd'> 2</span>         <span class='PDMOper'>.</span><span class='PDMVar'>icWindowMode</span> <span class='PDMOper'>=</span> <span class='PDMResF'>PADR</span><span class='PDMOper'>(</span><span class='PDMResF'>UPPER</span><span class='PDMOper'>(</span><span class='PDMResF'>ALLTRIM</span><span class='PDMOper'>(</span><span class='PDMVar'>tcWindowMode</span><span class='PDMOper'>)</span><span class='PDMOper'>)</span><span class='PDMOper'>,</span><span class='PDMLit'>3</span><span class='PDMOper'>)</span>
<span class='PDMCnt'> 73</span> <span class='PDMInd'> 1</span>     <span class='PDMResK'>OTHERWISE</span>
<span class='PDMCnt'> 74</span> <span class='PDMInd'> 2</span> <span class='PDMCom'>        *    No a valid character string</span>
<span class='PDMCnt'> 75</span> <span class='PDMInd'> 2</span>         <span class='PDMResK'>IF</span> <span class='PDMOper'>!</span> <span class='PDMResF'>EMPTY</span><span class='PDMOper'>(</span><span class='PDMOper'>.</span><span class='PDMVar'>icErrorMessage</span><span class='PDMOper'>)</span>
<span class='PDMCnt'> 76</span> <span class='PDMInd'> 3</span>             <span class='PDMOper'>.</span><span class='PDMVar'>icErrorMessage</span> <span class='PDMOper'>=</span> <span class='PDMOper'>.</span><span class='PDMVar'>icErrorMessage</span> <span class='PDMOper'>+</span> <span class='PDMStr'>' &amp; '</span>
<span class='PDMCnt'> 77</span> <span class='PDMInd'> 2</span>         <span class='PDMResK'>ENDIF</span>
<span class='PDMCnt'> 78</span> <span class='PDMInd'> 2</span>         <span class='PDMOper'>.</span><span class='PDMVar'>icErrorMessage</span> <span class='PDMOper'>=</span> <span class='PDMOper'>.</span><span class='PDMVar'>icErrorMessage</span> <span class='PDMOper'>+</span> <span class='PDMResF'>CHR</span><span class='PDMOper'>(</span><span class='PDMLit'>10</span><span class='PDMOper'>)</span> <span class='PDMOper'>+</span> <span class='PDMResF'>CHR</span><span class='PDMOper'>(</span><span class='PDMLit'>13</span><span class='PDMOper'>)</span> <span class='PDMOper'>+</span> <span class='PDMStr'>'Invalid WindowMode passed to Init Method'</span>
<span class='PDMCnt'> 79</span> <span class='PDMInd'> 1</span>     <span class='PDMResK'>ENDCASE</span>
<span class='PDMCnt'> 80</span> <span class='PDMInd'>  </span> <span class='PDMResK'>ENDWITH</span>
<span class='PDMCnt'> 81</span> <span class='PDMInd'>  </span> <span class='PDMResK'>RETURN</span> <span class='PDMLit'>.T.</span>
<span class='PDMCnt'> 82</span> <span class='PDMInd'>  </span> </pre>
 <!-- Code End -->
  </div>
 </div>
</div>
<div class="diaxp_mfoot"></div>
<script language="JavaScript" type="text/javascript">
lo=document.getElementById("TX_SP_3");
lo.XType="SourceCode";
lo.Dir="../../imgs/";


</script>
</body>
</html>
